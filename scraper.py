import os
import django
import json
import logging
from datetime import datetime

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mapproject.settings')
django.setup()

from mapapp.models import MapPin
from django.contrib.auth.models import User

# Configure logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    filename='spot_importer.log')
logger = logging.getLogger(__name__)

def import_spots_from_json(json_file_path):
    """Import smoke spots from a JSON file generated by ChatGPT"""
    
    logger.info(f"Starting import from {json_file_path}")
    
    # Get or create system user
    system_user, created = User.objects.get_or_create(
        username='System',
        defaults={
            'email': 'system@zazamap.com',
            'is_active': True
        }
    )
    if created:
        system_user.set_password(os.urandom(24).hex())
        system_user.save()
        logger.info("Created system user for ChatGPT generated spots")
    
    # Load JSON data
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            spots_data = json.load(file)
        
        logger.info(f"Loaded {len(spots_data)} spots from JSON file")
    except Exception as e:
        logger.error(f"Error loading JSON file: {str(e)}")
        return 0
    
    # Process each spot
    spots_created = 0
    spots_skipped = 0
    
    for spot in spots_data:
        try:
            # Check if spot already exists (based on coordinates)
            existing = MapPin.objects.filter(
                latitude=spot['latitude'],
                longitude=spot['longitude']
            ).exists()
            
            if existing:
                logger.info(f"Skipping duplicate spot: {spot['title']}")
                spots_skipped += 1
                continue
            
            # Create new pin
            pin = MapPin(
                title=spot['title'],
                description=spot['description'],
                latitude=spot['latitude'],
                longitude=spot['longitude'],
                category='smoke',  # Default category for smoke spots
                user=system_user,
                has_seating=spot.get('has_seating', False),
                is_scenic=spot.get('is_scenic', True),
                is_sheltered=spot.get('is_sheltered', False),
                is_private=spot.get('is_private', False),
                is_accessible=spot.get('is_accessible', True),
                security_level=spot.get('security_level', 1)
            )
            pin.save()
            spots_created += 1
            logger.info(f"Created spot: {pin.title} at {pin.latitude}, {pin.longitude}")
            
        except Exception as e:
            logger.error(f"Error creating spot {spot.get('title', 'unknown')}: {str(e)}")
    
    logger.info(f"Import completed. Created {spots_created} spots, skipped {spots_skipped} duplicates.")
    return spots_created

if __name__ == "__main__":
    # Path to your JSON file
    json_path = "chatgpt_smoke_spots.json"
    
    # Check if file exists
    if not os.path.exists(json_path):
        print(f"Error: File {json_path} not found!")
        exit(1)
    
    # Import spots
    spots_created = import_spots_from_json(json_path)
    print(f"Successfully imported {spots_created} smoke spots into the database!")